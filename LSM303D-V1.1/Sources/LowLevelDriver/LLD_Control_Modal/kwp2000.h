 
/*-- Defines -----------------------------------------------------------------*/
//#define Bad_Bootloader

#define EEPROM_400  0x400
#define PFLASH_C000  0xC000
#define PFLASH_8000 0x8000

#define PFLASH_PAGE_08  8
#define PFLASH_PAGE_09  9

#define Receive_Buf_Size    254
#define Calc_Data_Buf1     ( Receive_Buf_Size - 11)
#define Calc_Data_Buf2     ( Receive_Buf_Size - 6)
typedef struct
{
    UINT8 b_receive[192];
    UINT8 b_transmit[96];
    UINT8 b_receive_10ms[128];
    UINT8 b_transmit_10ms[96];  
    UINT8 b_receive_100ms[192];
    UINT8 b_transmit_100ms[128]; 
    UINT8 b_receive_syn[128]; 
    UINT8 b_transmit_syn[96];
}Receive_Com;

typedef struct
{
   UINT8 Periodic_Transmission_10ms:1;
   UINT8 Periodic_Transmission_100ms:1;
   UINT8 Periodic_Transmission_syn:1;
   UINT8 Periodic_Package_10ms:1;
   UINT8 Periodic_Package_100ms:1;
   UINT8 Periodic_Package_syn:1;
   UINT8 Transmit_Calibration_Data_Complete:1;
   UINT8 Periodic_Transmission_Error:1;
   
}Transmit_Receive_Complete_Flag;

#define Full_Duplex /* 全双工与半双工选择预定义 */

#define CARB_IDLETIME_CONTROL_ACTIVE 1
#define KWP2000_PREDEFINED_SERVICES_MASK_SIZE	5

/* Response codes for KWP2000 services */
#define KWP2000_GENERALREJECT								0x10
#define KWP2000_REQUESTNOTSUPPORTED 						0x11
#define KWP2000_SUBFUNCTIONNOTSUPPORTED						0x12
#define KWP2000_BUSY_WAITCLIENT								0x20
#define KWP2000_BUSY_REPEATREQUEST							0x21
#define KWP2000_CONDITIONSNOTCORRECT						0X22
#define KWP2000_ROUTINENOTCOMPLETE							0x23
#define KWP2000_REQUESTOUTOFRANGE							0x31
#define KWP2000_SECURITYACCESSDENIED						0x33
#define KWP2000_INVALIDKEY									0x35
#define KWP2000_EXCEEDNUMBEROFATTEMPTS						0x36
#define KWP2000_REQUIREDTIMEDELAYNOTEXPIRED					0x37
#define KWP2000_DOWNLOADNOTEXPECTED							0x40
#define KWP2000_IMPROPERDOWNLOADTYPE						0x41
#define KWP2000_CANNOTDOWNLOADTOSPECIFIEDADDRESS			0x42
#define KWP2000_CANNOTDOWNLOADNUMBEROFBYTESREQUESTED		0x43
#define KWP2000_UPLOADNOTACCEPTED							0x50
#define KWP2000_IMPROPERUPLOADTYPE							0x51
#define KWP2000_CANNOTUPLOADFROMSPECIFIEDADDRESS			0x52
#define KWP2000_CANNOTUPLOADNUMBEROFBYTESREQUESTED			0x53
#define KWP2000_NORMALEXITWITHRESULTSAVAILABLE				0x61
#define KWP2000_NORMALEXITWITHOUTRESULTSAVAILABLE			0x62
#define KWP2000_ABNORMALEXITWITHRESULTSAVAILABLE			0x63
#define KWP2000_ABNORMALEXITWITHOUTRESULTSAVAILABLE			0x64
#define KWP2000_TRANSFERSUSPENDED							0x71
#define KWP2000_TRANSFERABORTED								0x72
#define KWP2000_ILLEGALADDRESSINBLOCKTRANSFER				0x74
#define KWP2000_ILLEGALBYTECOUNTINBLOCKTRANSFER				0x75
#define KWP2000_ILLEGALBLOCKTRANSFERTYPE					0x76
#define KWP2000_BLOCKTRANSFERDATACHECKSUMERROR				0x77
#define KWP2000_REQCORRECTLYRCVDRSPPENDING					0x78
#define KWP2000_INCORRECTBYTECOUNTDURINGBLOCKTRANSFER		0x79
#define KWP2000_SERVICENOTSUPPORTEDINACTIVEDIAGNOSTICMODE	0x80

/* negative response */
#define KWP2000_NEGATIVERESPONSE	0x7F

/* Request Service Id */
#define KWP2000_STARTDIAGNOSTICSESSION_REQUEST					0x10
#define KWP2000_ECURESET_REQUEST								0x11
#define KWP2000_READFREEZEFRAMEDATA_REQUEST						0x12
#define KWP2000_READDIAGNOSTICTROUBLECODES_REQUEST				0x13
#define KWP2000_CLEARDIAGNOSTICINFORMATION_REQUEST				0x14
#define KWP2000_READNUMBEROFDIAGNOSTICTROUBLECODES_REQUEST		0x15
#define KWP2000_READSTATUSOFDIAGNOSTICTROUBLECODES_REQUEST		0x17
#define KWP2000_READDIAGNOSTICTROUBLECODESBYSTATUS_REQUEST		0x18
#define KWP2000_READECUIDENTIFICATION_REQUEST					0x1A
#define KWP2000_STOPDIAGNOSTICSESSION_REQUEST					0x20
#define KWP2000_READDATABYLOCALIDENTIFIER_REQUEST				0x21
#define KWP2000_READDATABYCOMMONIDENTIFIER_REQUEST				0x22
#define KWP2000_READMEMORYBYADDRESS_REQUEST						0x23
#define KWP2000_SETDATARATES_REQUEST							0x26
#define KWP2000_SECURITYACCESS_REQUEST							0x27
#define KWP2000_DYNAMICALLYDEFINELOCALIDENTIFIER_REQUEST		0x2C
#define KWP2000_WRITEDATABYCOMMONIDENTIFIER_REQUEST				0x2E
#define KWP2000_INPUTOUTPUTCONTROLBYCOMMONIDENTIFIER_REQUEST	0x2F
#define KWP2000_INPUTOUTPUTCONTROLBYLOCALIDENTIFIER_REQUEST		0x30
#define KWP2000_STARTROUTINEBYLOCALIDENTIFIER_REQUEST			0x31
#define KWP2000_STOPROUTINEBYLOCALIDENTIFIER_REQUEST			0x32
#define KWP2000_REQUESTROUTINERESULTSBYLOCALIDENTIFIER_REQUEST	0x33
#define KWP2000_REQUESTDOWNLOAD_REQUEST							0x34
#define KWP2000_REQUESTUPLOAD_REQUEST							0x35
#define KWP2000_TRANSFERDATA_REQUEST							0x36
#define KWP2000_REQUESTTRANSFEREXIT_REQUEST						0x37
#define KWP2000_STARTROUTINEBYADDRESS_REQUEST					0x38
#define KWP2000_STOPROUTINEBYADDRESS_REQUEST					0x39
#define KWP2000_REQUESTROUTINERESULTSBYADDRESS_REQUEST			0x3A
#define KWP2000_WRITEDATABYLOCALIDENTIFIER_REQUEST				0x3B
#define KWP2000_WRITEMEMORYBYADDRESS_REQUEST					0x3D
#define KWP2000_TESTERPRESENT_REQUEST							0x3E
#define KWP2000_ESCCODE_REQUEST									0x80
#define KWP2000_STARTCOMMUNICATION_REQUEST						0x81
#define KWP2000_STOPCOMMUNICATION_REQUEST						0x82
#define KWP2000_ACCESSTIMINGPARAMETER_REQUEST					0x83
#define KWP2000_STARTAPPLICATION_REQUEST						0xA0
#define KWP2000_STARTPERIODICTRANSMIT_REQUEST       0x98 /* 开始发送定时数据包指令 */
//#define KWP2000_TRANSMITAGAIN_REQUEST               0x88/* 重新发送请求ID */
#define KWP2000_TRANSMITCALIBRATIONDATA_REQUEST     0x9A/* 传送标定数据指令 */
#define KWP2000_CHECKCALIBRATIONDATA_REQUEST     0x9B
#define Transmit_Table_Request  0x9C

#define TRANSMIT_CODE 0xA0
#define GET_ECU_VERSION_REQUEST 0xA1
#define DISABLE_ECU_RUN_REQUEST 0xA2
#define ENABLE_ECU_RUN_REQUEST 0xA3

#define DOWNLOAD_NEED_PASSWORD_REQUEST  0xA4 //====下载数据时是否需要验证密码
#define DOWNLOAD_CHECK_PASSWORD_REQUEST 0xA5 //====进行密码验证
#define RESET_SELFLEARNTABLE_REQUEST 0xA6 //====复位自学习表格

/* Positive Response = RequestServiceId + 40h*/
#define KWP2000_STARTDIAGNOSTICPREPARE_POSITIVERESPONSE         0x4F 
#define KWP2000_STARTDIAGNOSTICSESSION_POSITIVERESPONSE					0x50
#define KWP2000_ECURESET_POSITIVERESPONSE								0x51
#define KWP2000_READFREEZEFRAMEDATA_POSITIVERESPONSE					0x52
#define KWP2000_READDIAGNOSTICTROUBLECODES_POSITIVERESPONSE				0x53
#define KWP2000_CLEARDIAGNOSTICINFORMATION_POSITIVERESPONSE				0x54
#define KWP2000_READNUMBEROFDIAGNOSTICTROUBLECODES_POSITIVERESPONSE		0x55
#define KWP2000_READSTATUSOFDIAGNOSTICTROUBLECODES_POSITIVERESPONSE		0x57
#define KWP2000_READDIAGNOSTICTROUBLECODESBYSTATUS_POSITIVERESPONSE		0x58
#define KWP2000_READECUIDENTIFICATION_POSITIVERESPONSE					0x5A
#define KWP2000_STOPDIAGNOSTICSESSION_POSITIVERESPONSE					0xEA //0x60 
#define KWP2000_READDATABYLOCALIDENTIFIER_POSITIVERESPONSE				0x61
#define KWP2000_READDATABYCOMMONIDENTIFIER_POSITIVERESPONSE				0x62
#define KWP2000_READMEMORYBYADDRESS_POSITIVERESPONSE					0x63
#define KWP2000_SETDATARATES_POSITIVERESPONSE							0x66
#define KWP2000_SECURITYACCESS_POSITIVERESPONSE							0x67
#define KWP2000_DYNAMICALLYDEFINELOCALIDENTIFIER_POSITIVERESPONSE		0x6C
#define KWP2000_WRITEDATABYCOMMONIDENTIFIER_POSITIVERESPONSE			0x6E
#define KWP2000_INPUTOUTPUTCONTROLBYCOMMONIDENTIFIER_POSITIVERESPONSE	0x6F
#define KWP2000_INPUTOUTPUTCONTROLBYLOCALIDENTIFIER_POSITIVERESPONSE	0x70
#define KWP2000_STARTROUTINEBYLOCALIDENTIFIER_POSITIVERESPONSE			0x71
#define KWP2000_STOPROUTINEBYLOCALIDENTIFIER_POSITIVERESPONSE			0x72
#define KWP2000_REQUESTROUTINERESULTSBYLOCALIDENTIFIER_POSITIVERESPONSE	0x73
#define KWP2000_REQUESTDOWNLOAD_POSITIVERESPONSE						0x74
#define KWP2000_REQUESTUPLOAD_POSITIVERESPONSE							0x75
#define KWP2000_TRANSFERDATA_POSITIVERESPONSE							0x76
#define KWP2000_REQUESTTRANSFEREXIT_POSITIVERESPONSE					0x77
#define KWP2000_STARTROUTINEBYADDRESS_POSITIVERESPONSE					0x78
#define KWP2000_STOPROUTINEBYADDRESS_POSITIVERESPONSE					0x79
#define KWP2000_REQUESTROUTINERESULTSBYADDRESS_POSITIVERESPONSE			0x7A
#define KWP2000_WRITEDATABYLOCALIDENTIFIER_POSITIVERESPONSE				0x7B
#define KWP2000_WRITEMEMORYBYADDRESS_POSITIVERESPONSE					0x7D
#define KWP2000_TESTERPRESENT_POSITIVERESPONSE							0x7E
#define KWP2000_ESCCODE_POSITIVERESPONSE								0xC0
#define KWP2000_STARTCOMMUNICATION_POSITIVERESPONSE						0xC1
#define KWP2000_STOPCOMMUNICATION_POSITIVERESPONSE						0xC2
#define KWP2000_ACCESSTIMINGPARAMETER_POSITIVERESPONSE					0xC3
#define KWP2000_STARTAPPLICATION_POSITIVERESPONSE						0xE0
#define KWP2000_CHECKCALIBRATIONDATA_POSITIVERESPONSE       0xE1 /* 检验标定数据的正响应 */
#define KWP2000_TRANSMITCALIBRATIONDATA_POSITIVERESPONSE     0xE2/* 传送标定数据正响应 */
#define KWP2000_STARTPERIODICTRANSMIT_POSITIVERESPONSE       0xE4 /* 开始发送定时数据包正响应 */
#define Transmit_Table_PositiveResponse 0xE5
#define GET_ECU_VERSION_POSITIVERESPONSE 0xE6
#define DISABLE_ECU_RUN_POSITIVERESPONSE 0xE7
#define ENABLE_ECU_RUN_POSITIVERESPONSE 0xE8
#define PROCAL_VERSION_MISMATCH_POSITIVERESPONSE 0xE9

#define DOWNLOAD_NEED_PASSWORD_POSITIVERESPONSE 0xEB //====下载数据时是否需要验证密码
#define DOWNLOAD_CHECK_PASSWORD_POSITIVERESPONSE 0xEC //====进行密码验证
#define RESET_SELFLEARNTABLE_POSITIVERESPONSE 0xED //====复位表格正响应
#define DOWNLOAD_PASSWORDFAILED_NEGATIVERESONSE  0xEE



/* Position of the timing parameters in the timing tables */
#define KWP2000_P1_MIN_IDX	0
#define KWP2000_P1_MAX_IDX	1
#define KWP2000_P2_MIN_IDX	2
#define KWP2000_P2_MAX_IDX	3
#define KWP2000_P3_MIN_IDX	4
#define KWP2000_P3_MAX_IDX	5
#define KWP2000_P4_MIN_IDX	6
#define KWP2000_P4_MAX_IDX	7

/* Max time duration for a byte */
#define KWP2000_BYTETIME	1	/* 10400Bd -> 1Bit=1/10400s=1000/10400ms */
								/* 1Byte = 1start + 8datas + 1stop       */
								/* 1Byte -> 10*1000/10400ms<1ms */

/* Number of bytes to receive to reach the new stage */
									/*               -> WAITRECEPTION : 1   (Fmt)           */
#define KWP2000_BYTESTOHEADER	3	/* WAITRECEPTION -> WAITHEADER    : 3   (Tgt Src Len)   */
#define KWP2000_BYTESTODATAS	2	/* WAITHEADER    -> WAITDATAS     : 2   (260-(3+1+254)) */
#define KWP2000_BYTESTOCOM		254	/* WAITDATAS     -> COMMUNICATION : 254 (Max by PEC)    */


#define KWP2000_ALLGROUPS  0xFFFF





/* Definition of the diagnostic modes */
#define KWP2000_DIAG_RESET								0x00
#define KWP2000_DIAG_DEFAULTMODE						0x81
#define KWP2000_DIAG_STANDARDDIAGNOSTICMODE				0x81
#define KWP2000_DIAG_OBDIIMODE							0x81
#define KWP2000_DIAG_ECUPERIODICTRANSMISSION  0x82
#define KWP2000_DIAG_ENDOFLINEVEHICLEMANUFACTURERMODE	0x83
#define KWP2000_DIAG_ENDOFLINESYSTEMSUPPLIERMODE		0x84
#define KWP2000_DIAG_ECUPROGRAMMINGMODE					0x85
#define KWP2000_DIAG_ECUDEVELOPMENTMODE					0x86
#define KWP2000_DIAG_ECUADJUSTEMENTMODE					0x87
#define KWP2000_DIAG_ECUVARIANTCODINGMODE				0x88

/* Definition of the bits in the modify  */
#define KWP2000_MODIFY_NONE		0x00	/* used for reset */
#define KWP2000_MODIFY_TIMING	0x01	/* bit 0 for timing */
#define KWP2000_MODIFY_BAUDRATE	0x02	/* bit 1 for baudrate */
#define KWP2000_MODIFY_COMMODE	0x04	/* bit 2 for commode */
#define KWP2000_MODIFY_MASK		0x08	/* bit 3 for mask */

/* Definition of the indexes  in the mask table */
#define KWP2000_PREDEFINED_SERVICES_MASK_INIT			0
#define KWP2000_PREDEFINED_SERVICES_MASK_STDSESSION		1
#define KWP2000_PREDEFINED_SERVICES_MASK_ASKPROGMODE	2
#define KWP2000_PREDEFINED_SERVICES_MASK_PROGMODE		3
#define KWP2000_PREDEFINED_SERVICES_MASK_DEVMODE		4

/* Definition of the ECU id table size */
#define KWP2000_ECUID_DATATABLE_SIZE	10

/* possible initialisation formats */
#define KWP2000_FORMAT_NOADDRESS			0	/* 00 */
#define KWP2000_FORMAT_CARB					1	/* 01 */
#define KWP2000_FORMAT_PHYSICALADDRESSING	2	/* 10 */
#define KWP2000_FORMAT_FUNCTIONALADDRESSING	3	/* 11 */

#define KWP2000_PHYSICALADDRESS  2
#define KWP2000_FUNCTIONALADDRESS 3

/* Limits of Timing Parameter Set for ROM initialisation */
#define KWP2000_P2_MIN_LIMIT_ROM	0
#define KWP2000_P2_MAX_LIMIT_ROM	1000
#define KWP2000_P3_MIN_LIMIT_ROM	0
#define KWP2000_P3_MAX_LIMIT_ROM	5000
#define KWP2000_P4_MIN_LIMIT_ROM	0

/* Normal Timing Parameter Set */
#define KWP2000_P1_MIN_NORMAL	0
#define KWP2000_P1_MAX_NORMAL	20
#define KWP2000_P2_MIN_NORMAL	25
#define KWP2000_P2_MAX_NORMAL	50
#define KWP2000_P3_MIN_NORMAL	55
#define KWP2000_P3_MAX_NORMAL	5000
#define KWP2000_P4_MIN_NORMAL	5
#define KWP2000_P4_MAX_NORMAL	20

/* Extended Timing Parameter Set */
#define KWP2000_P1_MIN_EXTENDED	0
#define KWP2000_P1_MAX_EXTENDED	20
#define KWP2000_P2_MIN_EXTENDED	0
#define KWP2000_P2_MAX_EXTENDED	1000
#define KWP2000_P3_MIN_EXTENDED	0
#define KWP2000_P3_MAX_EXTENDED	5000
#define KWP2000_P4_MIN_EXTENDED	5
#define KWP2000_P4_MAX_EXTENDED	20

#define CARB_FUNCTIONALADDRESS          0xC1
#define CARB_PHYSICALADDRESS            0x81
#define RESPONSE_FUNCTIONALADDRESS      0xC0
#define RESPONSE_PHYSICALADDRESS        0x80



#define KWP2000_WAITRECEPTION   0x01
#define KWP2000_WAITHEADER      0x02
#define KWP2000_WAITDATAS       0x03
#define KWP2000_COMMUNICATION   0x04
#define KWP2000_BUILDRESPONSE   0x05
#define KWP2000_SENDRESPONSE    0x06
#define KWP2000_MODIFYCONFIG    0x07
#define KWP2000_END             0x08











#define KWP2000_KEYBYTE1          0x8F
#define KWP2000_KEYBYTE2          0xD9



#define SCI_RX_MAX_SIZE         256
#define SCI_TX_MAX_SIZE         256
#define KWP2000_MAXTORECEIVE    260



#define   KWP2000_MEMTYPE_UNDEFINED  0
#define   KWP2000_MEMTYPE_RAM        1
#define   KWP2000_MEMTYPE_DFLASH     2
#define   KWP2000_MEMTYPE_PFLASH     3


#define KWP2000_READMEMORYBYADDRESS_MAX_DATA       64
#define KWP2000_WRITEMEMORYBYADDRESS_MAX_DATA_RAM  64


#define  ONE_BYTE    1
#define  TWO_BYTES   2
#define  FOUR_BYTES  4

#define PERIODIC_SYN   1
#define PERIODIC_10MS  2
#define PERIODIC_100MS 4
#define PERIODIC_100MS_Auto 8


//#define Calibration_Data_Start_Address 0x2900
//#define Calibration_Data_Length  2514
//#define Writeback_Data_Length  12





UINT8 KWP2000_ReadMemoryByAddress(UINT8 *blockByte);
UINT8 KWP2000_WriteMemoryByAddress(UINT8 *blockByte);
UINT8 kwp2000_Checksum_Test(void);
UINT8 kwp2000_Checksum_Calc(UINT8 *dataBuffer,UINT16 numberOfBytes);
void asc0_KWP2000_BuildResponse_Flash(void);
void asc0_KWP2000_SendResponse_Flash(void);
void asc0_KWP2000_NextState(void);
void Clear_Buffer(void);
/* 把头部字节加到即将从ECU发送的报文中 */
 UINT8 asc0_KWP2000_PrepareHeader_CARB(UINT8 datasize);
/* 对接收到得第一个格式字节进行分析 */
 UINT8 asc0_KWP2000_FormatAnalyse_FLASH(void);
/* 对接收的开始通讯报文的头部字节进行分析 */
 void asc0_KWP2000_HeaderAnalyse_StartCom(void);
/* 对接收到得普通命令的头部字节进行分析 */
 void asc0_KWP2000_HeaderAnalyse_FLASH(void);
 
void asc0_KWP2000_PrepareHeader_StatCom(void);
UINT8 KWP2000_StartCommunication_Flash(Byte *blockByte);
UINT8 KWP2000_StopCommunication_Flash(Byte *blockByte);
UINT8 asc0_KWP2000_DataTransmission_Flash(UINT16 messageSize);

 
UINT8 asc0_KWP2000_AddressTest();
void asc0_KWP2000_ProtocolInit_FLASH(void);
void asc0_KWP2000_FLASH_10ms(void);
UINT8 asc0_KWP2000_ServiceNotImplemented(UINT8 *blockByte);

UINT8 KWP2000_MemoryWrite_AddressTest(UINT8 memorySize,UINT16 memoryAddress);

UINT8 asc0_KWP2000_ReadDiagnosticTroubleCodesByStatus(UINT8 *blockByte);
UINT8 Get_Number_Of_DTCs();
static UINT8 asc0_KWP_ReadOneDTC(UINT8 withData,UINT8 *blockByte);
UINT8 asc0_KWP2000_StartDiagnosticSession(UINT8 *blockByte);
UINT8 asc0_KWP2000_Diag_PeriodicTransmissionMode(UINT8 *blockByte);
UINT8 asc0_KWP2000_StopDiagnosticSession(UINT8 *blockByte);

void asc0_KWP2000_ServiceNegativeResponse(UINT8 ServiceID);
/* 定时任务打包函数 */
UINT8 KWP2000_Task10ms_PeriodicGetData(void);
UINT8 KWP2000_Tasksyn_PeriodicGetData(UINT16 missing_tooth_period);
UINT8 KWP2000_Task100ms_PeriodicGetData(void);
/* 定时任务发包函数 */
void KWP2000_Task10ms_PeriodicTransmission(void);
void KWP2000_Task100ms_PeriodicTransmission(void);
void KWP2000_Tasksyn_PeriodicTransmission(void);

UINT8 asc0_KWP2000_StartPeriodicTransmit(UINT8 *blockByte);

UINT8 asc0_KWP2000_WriteDataByLocalIdentifier(UINT8 *blockByte);
void KWP2000_Verify_PeriodicTransmission(void);
void Positive_Response_Interrupt_Transmit(void);
void Positive_Response_Normal_Transmit(void);
UINT16 Calc_DataChecksum(void);
UINT8 asc0_KWP2000_CheckCalibrationData(UINT8 *blockByte);
UINT8 KWP2000_RequestDownload_Request(UINT8 *blockByte);
void  KWP2000_PeriodicTaskTransmit_Disable(void);
 

void  KWP2000_Transmit_Table(void);                       
void Return_Answer(UINT8 service_id);

UINT8 Send_NeedPassword_PositiveResponse(UINT8 *blockByte);
UINT8 Send_CheckPassword_PositiveResponse(UINT8 *blockByte);
UINT8 CheckSerialNumCounter(UINT16 counter);
UINT8 Reset_SelfLearnTab_PositiveResponse(UINT8 *blockByte);
UINT8 KWP2000_CheckPasswordBeforeDownloadOrUpload(UINT8 *Ptr_Passwd);

#pragma CODE_SEG __NEAR_SEG MY_CODE_ROM

void Send_Code(UINT16 DFLASH_Num,UINT16 NON_BANKED_Num,UINT16 PFLASH_Page8_Num,UINT16 PFLASH_Page9_Num);
void GoTo_MonitorProgram(void);

#pragma CODE_SEG  DEFAULT















